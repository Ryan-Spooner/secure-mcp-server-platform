# .windsurfrules
# Defines rules and context management for the AI assistant in this workspace.
# Version: 1.1 (Optimized for clarity and explicit update strategies)

# --- Rule Priority ---
# Ensures these workspace-specific rules take precedence over any global settings.
rule_priority:
  description: "These Workspace AI Rules override any conflicting global or system rules."
  precedence: ABSOLUTE # Workspace rules are final.

# --- Memory System ---
# Configures the file-based memory bank used by the AI for context persistence.
memory_system:
  type: memory-bank # Specifies the type of memory system.
  directory: ./memory-bank # Relative path to the directory storing memory files.

  # Core Files: Key documents the AI should be aware of and potentially update.
  core_files:
    productContext: productContext.md   # High-level project goals, features, architecture.
    activeContext: activeContext.md    # Current focus, recent changes, open questions.
    progress: progress.md            # Task tracking (completed, current, backlog).
    decisionLog: decisionLog.md        # Log of significant technical decisions.
    systemPatterns: systemPatterns.md  # Recurring code patterns, architectural choices, style guides.

  # Update Strategy: Defines how the AI should modify core files.
  # Options: APPEND (add to end), REPLACE_SECTION (find header, replace content below it), OVERWRITE (replace entire file).
  # Note: The AI should use judgment; e.g., 'APPEND' to logs, 'REPLACE_SECTION' for dynamic states.
  update_strategies:
    productContext.md: REPLACE_SECTION # Product context is better maintained by updating relevant sections.
    activeContext.md: REPLACE_SECTION # Current focus/changes usually replace previous state. Use ## headers as anchors.
    progress.md: APPEND # Append completed tasks, discovered items. Current tasks might need section replacement.
    decisionLog.md: APPEND # Always append new decisions chronologically.
    systemPatterns.md: APPEND # Add new patterns or refine existing ones (manual edit might be better for refinement).

  # Initial Content Templates: Defines the structure if files need creation.
  # These are primarily for reference; an initialization script should handle actual creation.
  initial_content_templates:
    productContext.md: |
      # Product Context (SMCP)
      *Source: Based on projectBrief.md, README.md, and ongoing discussions.*
      *Updates: Sections may be replaced or content appended by AI as project understanding evolves.*
      *Last Reviewed: [YYYY-MM-DD]*
      ---
      ## SMCP Mission
      * **Educational Empowerment:** To provide comprehensive resources, examples, and tutorials that enable developers to master MCP, build robust MCP servers, and integrate them effectively.
      * **Platform Foundation:** To evolve into an open-source platform featuring a curated MCP Server Catalog and tools for creating containerized AI systems leveraging MCP.

      ## Core Principles
      * **Open Protocols & FOSS:** Commitment to open standards and free, open-source software.
      * **Robust Security:** Prioritizing secure design and practices in all components and recommendations.
      * **Community Driven:** Fostering a collaborative environment for learning, contribution, and innovation.

      ## Key Features & Deliverables
      *   **Educational Toolkit:**
          *   Universal MCP Showcase (client/server example).
          *   Project Templates (Python MCP Server, JS Client, etc.).
          *   Tutorials (MCP Troubleshooting, Custom MCP Server Creation).
          *   Living Documentation.
      *   **SMCP Platform (Future Vision):**
          *   MCP Server Catalog/Marketplace.
          *   Containerized AI System Creator (Agentic System).
          *   Archon Integration Strategy.
          *   SecureG PKI-as-a-Service Integration.

      ## Target Audience
      * AI Developers, ML Engineers, System Architects.
      * Individuals and organizations looking to understand, build, or integrate with Model Context Protocol (MCP) servers.

      ## High-Level Architecture Overview (Conceptual)
      *   **Educational Resources:** Hosted in a structured GitHub repository (e.g., `smcp-docs-and-examples`).
      *   **MCP Server Catalog:** Database-backed (e.g., PostgreSQL) with a RESTful API for submissions and queries.
      *   **Agentic System Creator:** Mixture-of-Experts (MoE) architecture, template-driven, generating containerized outputs (Docker, Compose).

    activeContext.md: |
      # Active Context
      *Purpose: Tracks the immediate state of work for AI assistance.*
      *Updates: Sections often replaced by AI based on recent activity.*
      *Timestamp: [YYYY-MM-DD HH:MM:SS]*
      ---
      ## Current Focus
      * [Specific task, module, or problem being worked on right now]

      ## Recent Significant Changes (Last 1-2 sessions)
      * [Brief summary of major code changes, file additions, etc.]

      ## Open Questions / Blockers / Issues
      * [Any unresolved questions, dependencies, or problems hindering progress]

      ## Next Immediate Step(s)
      * [What the user plans to do next]

    progress.md: |
      # Progress Tracker (SMCP)
      *Purpose: High-level overview of task status aligned with SMCP goals.*
      *Updates: Primarily appended by AI upon task completion or discovery. Relate tasks to SMCP Phases (Educational Foundation, Platform Development) where applicable.*
      *Last Updated: [YYYY-MM-DD]*
      ---
      ## Completed Tasks
      * [YYYY-MM-DD] - [Description of completed task - Phase: Educational/Platform]

      ## Current Tasks / In Progress
      * [Task ID/Link] - [Description of task currently being worked on - Phase: Educational/Platform]

      ## Blocked Tasks
      * [Task ID/Link] - [Description] - **Blocker:** [Reason]

      ## Next Steps / Backlog (Prioritized)
      * [Task ID/Link] - [Description - Phase: Educational/Platform]

      ## Discovered During Work (Needs Triaging)
      * [YYYY-MM-DD] - [New sub-task, bug, or required refactor identified]

    decisionLog.md: |
      # Decision Log
      *Purpose: Records significant technical or architectural choices.*
      *Updates: New decisions appended by AI or user.*
      ---
      **Decision:**
      * [Clear statement of the decision made]
      **Rationale:**
      * [Why this decision was made; alternatives considered]
      **Context/Trigger:**
      * [What led to needing this decision?]
      **Implementation Notes:**
      * [Key files affected, specific techniques used, gotchas]
      **Timestamp:** [YYYY-MM-DD HH:MM:SS]
      ---
      *(New entries added above this line)*

    systemPatterns.md: |
      # System Patterns & Conventions (SMCP)
      *Purpose: Documents recurring design patterns, coding standards, and architectural choices specific to the SMCP project.*
      *Updates: Appended or refined by AI/user as patterns emerge or standards are set.*
      *Last Reviewed: [YYYY-MM-DD]*
      ---
      ## Coding Style / Linting
      * [e.g., Linter used, key rules, formatting standards for examples and platform code]

      ## Documentation Standards (Living Docs)
      * [e.g., Structure for tutorials, READMEs; use of "Edit on GitHub" links; process for updates]

      ## Common Data Structures
      * [e.g., Standard format for MCP Server Catalog entries, API responses for SMCP platform]

      ## Architectural Patterns (SMCP)
      *   **Educational Examples Structure:** [e.g., Client/Server separation, README requirements]
      *   **MCP Server Catalog Design:** [e.g., Database schema notes, API design principles]
      *   **Agentic System (Creator) Design:** [e.g., MoE component interaction, template structure]
      *   **General:** [e.g., MVC, Microservices - if applicable to SMCP platform components]

      ## Naming Conventions
      * [e.g., Variables, constants, classes, files, repository names for SMCP project]

      ## Error Handling Strategy
      * [e.g., For SMCP examples, for the SMCP platform services]
      
      ## Security Considerations (SMCP Core Principle)
      *   **General:** Input validation, secrets management, dependency scanning for all SMCP code.
      *   **MCP Communications:** Recommendations for mTLS, message signing (SecureG PKI context).
      *   **Platform Security:** Secure by design principles for catalog and agentic creator.

      ## Deployment Patterns
      *   **SMCP Examples:** [e.g., Dockerfile strategy, local run instructions]
      *   **SMCP Platform (Future):** [e.g., Containerization, CI/CD pipeline notes]
